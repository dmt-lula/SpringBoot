package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import jakarta.persistence.EntityNotFoundException;


// ./mvnw spring-boot:run
@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

  // curl.exe http://localhost:8080/demo/add -d name= -d email= -d phone= -d city=
  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewUser (@RequestParam String name
      , @RequestParam String email, @RequestParam String phone, @RequestParam String city) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    if (!userRepository.findByEmail(email).isEmpty()) {
      return "Taki email juz istnieje";
    }
    else{
      User_Tomek n = new User_Tomek();
      n.setName(name);
      n.setEmail(email);
      n.setPhone(phone);
      n.setCity(city);
      userRepository.save(n);
      return "Saved";
    }
  }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<User_Tomek> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }


  @RequestMapping(path="/find", method = {RequestMethod.GET, RequestMethod.POST})
  public @ResponseBody Iterable<User_Tomek> findUsers(
      @RequestParam(required = false) String email,
      @RequestParam(required = false) String city,
      @RequestParam(required = false) String name) {

    if (email != null) {
      return userRepository.findByEmail(email); //curl.exe http://localhost:8080/demo/find?email=
    } else if (city != null) {
      return userRepository.findByCity(city); //curl.exe http://localhost:8080/demo/find?city=
    } else if (name != null) {                //curl.exe  http://localhost:8080/demo/find -d name=Tomek | ConvertFrom-Json | Format-List
      return userRepository.findByName(name); //curl.exe http://localhost:8080/demo/find?name= | ConvertFrom-Json
    } else {
      return userRepository.findAll();
    }
  }

  @RequestMapping(value = "/changeName", method = {RequestMethod.GET,RequestMethod.POST, RequestMethod.PATCH})
  // @PatchMapping("/changeName") // zmiana istniejących danych
   @ResponseBody public String changeUserName (@RequestParam Integer id, @RequestParam String name) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    // curl.exe http://localhost:8080/demo/changeName -d id=... -d name=...
    // http://localhost:8080/demo/changeName?id=55&name=oo
    if (userRepository.existsById(id)){
      User_Tomek user = userRepository.findById(id)
    .orElseThrow(() -> new EntityNotFoundException("User with ID " + id + " not found"));
            // .orElseThrow(() -> new RuntimeException("User not found"));

    // Integer oldUser = user.getId();
    // String oldName = user.getName();
    user.setName(name);
        userRepository.save(user);
        return "Zaktualizowano imię";
    }
    else{return "Brak użytkownika dla id=" + id;
    }
  }

  // curl.exe http://localhost:8080/demo/delete -d id=
  @RequestMapping(value = "/delete", method = {RequestMethod.DELETE, RequestMethod.POST})
  @ResponseBody
  public String deleteUser(@RequestParam Integer id) {
    if (userRepository.existsById(id)) {
      userRepository.deleteById(id);
      return "Usunięto użytkownika o id=" + id;
    } else {
      return "Brak użytkownika dla id=" + id;
    }
  }
}
